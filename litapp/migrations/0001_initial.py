# Generated by Django 5.2.7 on 2025-10-10 13:37

import django.core.validators
import django.db.models.deletion
import litapp.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LiteratureReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("topic", models.CharField(db_index=True, max_length=255)),
                (
                    "content",
                    models.TextField(
                        help_text="AI-generated literature review content (3000+ words)"
                    ),
                ),
                (
                    "citations",
                    models.JSONField(
                        default=dict, help_text="Mapping of paper_id â†’ citation string"
                    ),
                ),
                (
                    "word_count",
                    models.IntegerField(
                        default=0, help_text="Approximate word count of the review"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="literature_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Literature Review",
                "verbose_name_plural": "Literature Reviews",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LiteratureReviewJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("topic", models.CharField(db_index=True, max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("result_text", models.TextField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True,
                        help_text="Celery task ID for tracking/revocation",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("papers_found", models.IntegerField(default=0)),
                ("papers_downloaded", models.IntegerField(default=0)),
                ("papers_extracted", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "review",
                    models.OneToOneField(
                        blank=True,
                        help_text="Linked completed review, if available",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="job",
                        to="litapp.literaturereview",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lit_review_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Literature Review Job",
                "verbose_name_plural": "Literature Review Jobs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "openalex_id",
                    models.CharField(db_index=True, max_length=50, unique=True),
                ),
                (
                    "title",
                    models.TextField(
                        validators=[django.core.validators.MinLengthValidator(1)]
                    ),
                ),
                (
                    "authors",
                    models.TextField(help_text="Comma-separated list of authors"),
                ),
                ("year", models.IntegerField(db_index=True)),
                ("doi", models.CharField(blank=True, max_length=100, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("pdf_url", models.URLField(blank=True, db_index=True, null=True)),
                (
                    "cached_file",
                    models.FileField(
                        blank=True,
                        help_text="Cached local copy of PDF",
                        null=True,
                        upload_to=litapp.models.pdf_cache_path,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True, help_text="Extracted full text from the PDF"
                    ),
                ),
                (
                    "text_length",
                    models.IntegerField(
                        default=0,
                        help_text="Character count of extracted text for quick filtering",
                    ),
                ),
                ("download_attempted", models.BooleanField(default=False)),
                ("download_failed", models.BooleanField(default=False)),
                ("extraction_attempted", models.BooleanField(default=False)),
                ("extraction_failed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Paper",
                "verbose_name_plural": "Papers",
                "ordering": ["-year", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["openalex_id"], name="litapp_pape_openale_8c392e_idx"
                    ),
                    models.Index(fields=["year"], name="litapp_pape_year_9de2fb_idx"),
                    models.Index(
                        fields=["pdf_url"], name="litapp_pape_pdf_url_5976f2_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="litapp_pape_created_e654c3_idx"
                    ),
                    models.Index(
                        fields=["text_length", "year"],
                        name="litapp_pape_text_le_46eba1_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="literaturereview",
            name="papers",
            field=models.ManyToManyField(
                blank=True,
                help_text="Papers included in this review",
                related_name="reviews",
                to="litapp.paper",
            ),
        ),
        migrations.CreateModel(
            name="SearchHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("topic", models.CharField(db_index=True, max_length=255)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        help_text="Linked Celery job for the search, if any",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="search_records",
                        to="litapp.literaturereviewjob",
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        blank=True,
                        help_text="Linked final literature review, if available",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="search_records",
                        to="litapp.literaturereview",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Search History",
                "verbose_name_plural": "Search Histories",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="literaturereviewjob",
            index=models.Index(
                fields=["user", "status"], name="litapp_lite_user_id_bab18e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="literaturereviewjob",
            index=models.Index(
                fields=["status", "created_at"], name="litapp_lite_status_0d3826_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="literaturereviewjob",
            index=models.Index(
                fields=["created_at"], name="litapp_lite_created_b53380_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="literaturereviewjob",
            index=models.Index(
                fields=["celery_task_id"], name="litapp_lite_celery__8b7724_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="literaturereview",
            index=models.Index(
                fields=["user", "created_at"], name="litapp_lite_user_id_67bbae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="literaturereview",
            index=models.Index(fields=["topic"], name="litapp_lite_topic_888d8f_idx"),
        ),
        migrations.AddIndex(
            model_name="literaturereview",
            index=models.Index(
                fields=["created_at"], name="litapp_lite_created_6b654f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="searchhistory",
            index=models.Index(
                fields=["user", "timestamp"], name="litapp_sear_user_id_1dbe67_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="searchhistory",
            index=models.Index(
                fields=["topic", "timestamp"], name="litapp_sear_topic_174a46_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="searchhistory",
            index=models.Index(
                fields=["timestamp"], name="litapp_sear_timesta_1735ae_idx"
            ),
        ),
    ]
