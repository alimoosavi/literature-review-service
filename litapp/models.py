import hashlib
import os

from django.conf import settings
from django.contrib.auth.models import User
from django.core.validators import MinLengthValidator
from django.db import models
from django.utils import timezone


def pdf_cache_path(instance, filename):
    """
    Determines the file path for storing cached PDFs based on a hash of the PDF URL.
    This ensures each unique URL corresponds to exactly one cached file.
    """
    hashed_name = hashlib.sha256(instance.pdf_url.encode()).hexdigest()
    return os.path.join(settings.REPO_CACHE_DIR, f"{hashed_name}.pdf")


class Paper(models.Model):
    """
    Represents an academic paper fetched from OpenAlex or another scholarly source.
    If a PDF is available, it's downloaded and cached locally to avoid redundant downloads.
    """
    openalex_id = models.CharField(max_length=50, unique=True, db_index=True)
    title = models.TextField(validators=[MinLengthValidator(1)])
    authors = models.TextField(help_text="Comma-separated list of authors")
    year = models.IntegerField(db_index=True)
    doi = models.CharField(max_length=100, blank=True, null=True)
    url = models.URLField(blank=True, null=True)
    pdf_url = models.URLField(blank=True, null=True, db_index=True)
    cached_file = models.FileField(
        upload_to=pdf_cache_path,
        blank=True,
        null=True,
        help_text="Cached local copy of PDF"
    )
    text = models.TextField(blank=True, help_text="Extracted full text from the PDF")
    text_length = models.IntegerField(
        default=0,
        help_text="Character count of extracted text for quick filtering"
    )

    # Metadata tracking
    download_attempted = models.BooleanField(default=False)
    download_failed = models.BooleanField(default=False)
    extraction_attempted = models.BooleanField(default=False)
    extraction_failed = models.BooleanField(default=False)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["-year", "-created_at"]
        indexes = [
            models.Index(fields=["openalex_id"]),
            models.Index(fields=["year"]),
            models.Index(fields=["pdf_url"]),
            models.Index(fields=["created_at"]),
            # Composite index for filtering papers with text
            models.Index(fields=["text_length", "year"]),
        ]
        verbose_name = "Paper"
        verbose_name_plural = "Papers"

    def __str__(self):
        return f"{self.title[:60]} ({self.year})"

    @property
    def cached_pdf_path(self):
        """Returns absolute path to cached PDF, if it exists."""
        if self.cached_file:
            return os.path.join(settings.MEDIA_ROOT, self.cached_file.name)
        return None

    @property
    def has_full_text(self):
        """Check if paper has substantial extracted text."""
        return self.text_length > 100

    def save(self, *args, **kwargs):
        """Override save to update text_length automatically."""
        if self.text:
            self.text_length = len(self.text)
        super().save(*args, **kwargs)


class LiteratureReview(models.Model):
    """
    Represents a finalized literature review generated by the system.
    """
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="literature_reviews"
    )
    topic = models.CharField(max_length=255, db_index=True)
    content = models.TextField(
        help_text="AI-generated literature review content (3000+ words)"
    )
    citations = models.JSONField(
        default=dict,
        help_text="Mapping of paper_id â†’ citation string"
    )
    word_count = models.IntegerField(
        default=0,
        help_text="Approximate word count of the review"
    )
    papers = models.ManyToManyField(
        Paper,
        related_name="reviews",
        blank=True,
        help_text="Papers included in this review"
    )

    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["user", "created_at"]),
            models.Index(fields=["topic"]),
            models.Index(fields=["created_at"]),
        ]
        verbose_name = "Literature Review"
        verbose_name_plural = "Literature Reviews"

    def __str__(self):
        return f"Review on '{self.topic}' by {self.user.username}"

    def save(self, *args, **kwargs):
        """Override save to calculate word count."""
        if self.content:
            self.word_count = len(self.content.split())
        super().save(*args, **kwargs)


class LiteratureReviewJob(models.Model):
    """
    Represents a Celery job for generating a literature review in the background.
    Tracks task status and output text.
    """
    STATUS_CHOICES = [
        ("pending", "Pending"),
        ("processing", "Processing"),
        ("completed", "Completed"),
        ("failed", "Failed"),
    ]

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="lit_review_jobs"
    )
    topic = models.CharField(max_length=255, db_index=True)
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default="pending",
        db_index=True
    )
    result_text = models.TextField(blank=True, null=True)
    error_message = models.TextField(blank=True, null=True)

    # Celery task tracking
    celery_task_id = models.CharField(
        max_length=255,
        blank=True,
        null=True,
        help_text="Celery task ID for tracking/revocation"
    )

    # Processing metrics
    papers_found = models.IntegerField(default=0)
    papers_downloaded = models.IntegerField(default=0)
    papers_extracted = models.IntegerField(default=0)

    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)
    completed_at = models.DateTimeField(null=True, blank=True)

    review = models.OneToOneField(
        LiteratureReview,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="job",
        help_text="Linked completed review, if available",
    )

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["user", "status"]),
            models.Index(fields=["status", "created_at"]),
            models.Index(fields=["created_at"]),
            models.Index(fields=["celery_task_id"]),
        ]
        verbose_name = "Literature Review Job"
        verbose_name_plural = "Literature Review Jobs"

    def __str__(self):
        return f"{self.topic} ({self.status}) - {self.user.username}"

    @property
    def is_active(self):
        """Check if job is currently pending or processing."""
        return self.status in ["pending", "processing"]

    @property
    def duration(self):
        """Calculate job duration if completed."""
        if self.completed_at:
            return (self.completed_at - self.created_at).total_seconds()
        return None

    def mark_completed(self):
        """Mark job as completed and set completion timestamp."""
        self.status = "completed"
        self.completed_at = timezone.now()
        self.save()

    def mark_failed(self, error_message):
        """Mark job as failed with error message."""
        self.status = "failed"
        self.error_message = error_message
        self.completed_at = timezone.now()
        self.save()


class SearchHistory(models.Model):
    """
    Logs each user query (topic, and timestamp).
    Optionally links to a job or review if one exists.
    """
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="search_history"
    )
    topic = models.CharField(max_length=255, db_index=True)
    timestamp = models.DateTimeField(auto_now_add=True, db_index=True)

    job = models.ForeignKey(
        LiteratureReviewJob,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="search_records",
        help_text="Linked Celery job for the search, if any",
    )
    review = models.ForeignKey(
        LiteratureReview,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="search_records",
        help_text="Linked final literature review, if available",
    )

    class Meta:
        ordering = ["-timestamp"]
        indexes = [
            models.Index(fields=["user", "timestamp"]),
            models.Index(fields=["topic", "timestamp"]),
            models.Index(fields=["timestamp"]),
        ]
        verbose_name = "Search History"
        verbose_name_plural = "Search Histories"

    def __str__(self):
        return f"{self.user.username} searched '{self.topic}' at {self.timestamp:%Y-%m-%d %H:%M}"