import hashlib
import os

from django.conf import settings
from django.contrib.auth.models import User
from django.db import models


def pdf_cache_path(instance, filename):
    """
    Determines the file path for storing cached PDFs based on a hash of the PDF URL.
    This ensures each unique URL corresponds to exactly one cached file.
    """
    hashed_name = hashlib.sha256(instance.pdf_url.encode()).hexdigest()
    return os.path.join("pdfs", f"{hashed_name}.pdf")


class Paper(models.Model):
    """
    Represents an academic paper fetched from OpenAlex or another scholarly source.
    If a PDF is available, it's downloaded and cached locally to avoid redundant downloads.
    """
    openalex_id = models.CharField(max_length=50, unique=True)
    title = models.TextField()
    authors = models.TextField(help_text="Comma-separated list of authors")
    year = models.IntegerField()
    doi = models.CharField(max_length=100, blank=True, null=True)
    url = models.URLField(blank=True, null=True)
    pdf_url = models.URLField(blank=True, null=True)
    cached_file = models.FileField(
        upload_to=pdf_cache_path, blank=True, null=True, help_text="Cached local copy of PDF"
    )
    text = models.TextField(blank=True, help_text="Extracted full text from the PDF")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["-year"]
        indexes = [
            models.Index(fields=["openalex_id"]),
            models.Index(fields=["year"]),
        ]

    def __str__(self):
        return f"{self.title[:60]} ({self.year})"

    @property
    def cached_pdf_path(self):
        """Returns absolute path to cached PDF, if it exists."""
        if self.cached_file:
            return os.path.join(settings.MEDIA_ROOT, self.cached_file.name)
        return None


class LiteratureReview(models.Model):
    """
    Represents a finalized literature review generated by the system.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="literature_reviews")
    topic = models.CharField(max_length=255)
    prompt = models.TextField()
    content = models.TextField(help_text="AI-generated literature review content (3000+ words)")
    citations = models.JSONField(default=dict, help_text="Mapping of paper_id â†’ citation string")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["topic"]),
            models.Index(fields=["created_at"]),
        ]

    def __str__(self):
        return f"Review on '{self.topic}' by {self.user.username}"


class LiteratureReviewJob(models.Model):
    """
    Represents a Celery job for generating a literature review in the background.
    Tracks task status and output text.
    """
    STATUS_CHOICES = [
        ("pending", "Pending"),
        ("processing", "Processing"),
        ("completed", "Completed"),
        ("failed", "Failed"),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="lit_review_jobs")
    topic = models.CharField(max_length=255)
    prompt = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="pending")
    result_text = models.TextField(blank=True, null=True)
    error_message = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    review = models.OneToOneField(
        LiteratureReview,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="job",
        help_text="Linked completed review, if available",
    )

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["status"]),
            models.Index(fields=["created_at"]),
        ]

    def __str__(self):
        return f"{self.topic} ({self.status})"


class SearchHistory(models.Model):
    """
    Logs each user query (topic, prompt, and timestamp).
    Optionally links to a job or review if one exists.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="search_history")
    topic = models.CharField(max_length=255)
    prompt = models.TextField(blank=True, null=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    job = models.ForeignKey(
        LiteratureReviewJob,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="search_records",
        help_text="Linked Celery job for the search, if any",
    )
    review = models.ForeignKey(
        LiteratureReview,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="search_records",
        help_text="Linked final literature review, if available",
    )

    class Meta:
        ordering = ["-timestamp"]
        indexes = [
            models.Index(fields=["user", "timestamp"]),
            models.Index(fields=["topic"]),
        ]

    def __str__(self):
        return f"{self.user.username} searched '{self.topic}' at {self.timestamp:%Y-%m-%d %H:%M}"
