version: '3.9'

services:
  db:
    image: postgres:15
    container_name: litrevai_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"

  redis:
    image: redis:7
    container_name: litrevai_redis
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "--appendonly", "yes"]
#
#  litrevai_service:
#    build: .
#    container_name: litrevai_service
#    command: >
#      sh -c "
#        until python -c 'import socket; socket.create_connection((\"db\", 5432))' 2>/dev/null; do
#          echo 'Waiting for PostgreSQL...'; sleep 2
#        done &&
#        until python -c 'import socket; socket.create_connection((\"redis\", 6379))' 2>/dev/null; do
#          echo 'Waiting for Redis...'; sleep 2
#        done &&
#        echo 'Dependencies ready!' &&
#        python manage.py migrate --noinput &&
#        gunicorn litRevAI.wsgi:application --bind 0.0.0.0:8000 --workers 3
#      "
#    volumes:
#      - .:/app
#      - ./media:/app/media
#    ports:
#      - "8000:8000"
#    env_file:
#      - .docker.env.sample
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    restart: on-failure:3
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 10s
#
#  litrevai_celery:
#    build: .
#    container_name: litrevai_celery
#    command: >
#      sh -c "
#        until python -c 'import socket; socket.create_connection((\"redis\", 6379))' 2>/dev/null; do
#          echo 'Waiting for Redis...'; sleep 2
#        done &&
#        echo 'Redis ready!' &&
#        celery -A litRevAI.celery app worker --pool=solo -l info --concurrency=2
#      "
#    volumes:
#      - .:/app
#      - ./media:/app/media
#    env_file:
#      - .docker.env.sample
#    depends_on:
#      redis:
#        condition: service_healthy
#    restart: on-failure:3

volumes:
  postgres_data:
  redis_data: